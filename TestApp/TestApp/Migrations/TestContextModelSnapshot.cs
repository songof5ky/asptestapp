// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using TestApp.Models;

namespace TestApp.Migrations
{
    [DbContext(typeof(TestContext))]
    partial class TestContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TestApp.Models.Criticality", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("text");

                    b.HasKey("id");

                    b.ToTable("Crites");
                });

            modelBuilder.Entity("TestApp.Models.err", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("criticalityId");

                    b.Property<DateTime>("date");

                    b.Property<string>("f_descript");

                    b.Property<string>("s_descript");

                    b.Property<int>("statusId");

                    b.Property<int>("urgencyId");

                    b.Property<string>("user_id");

                    b.HasKey("id");

                    b.HasIndex("criticalityId");

                    b.HasIndex("statusId");

                    b.HasIndex("urgencyId");

                    b.ToTable("Errors");
                });

            modelBuilder.Entity("TestApp.Models.ErrorHistory", b =>
                {
                    b.Property<DateTime>("date");

                    b.Property<string>("act");

                    b.Property<string>("comnt");

                    b.Property<int>("errId");

                    b.Property<string>("user_id");

                    b.HasKey("date");

                    b.HasIndex("errId");

                    b.ToTable("ErHstr");
                });

            modelBuilder.Entity("TestApp.Models.Status", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("text");

                    b.HasKey("id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("TestApp.Models.Urgency", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("text");

                    b.HasKey("id");

                    b.ToTable("Urg");
                });

            modelBuilder.Entity("TestApp.Models.User", b =>
                {
                    b.Property<string>("username")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("first_name");

                    b.Property<string>("last_name");

                    b.Property<string>("password");

                    b.HasKey("username");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TestApp.Models.err", b =>
                {
                    b.HasOne("TestApp.Models.Criticality", "criticality")
                        .WithMany("errors")
                        .HasForeignKey("criticalityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestApp.Models.Status", "status")
                        .WithMany("errors")
                        .HasForeignKey("statusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestApp.Models.Urgency", "urgency")
                        .WithMany("errors")
                        .HasForeignKey("urgencyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestApp.Models.ErrorHistory", b =>
                {
                    b.HasOne("TestApp.Models.err", "err")
                        .WithMany("Histories")
                        .HasForeignKey("errId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
